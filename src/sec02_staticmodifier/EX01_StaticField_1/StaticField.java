package sec02_staticmodifier.EX01_StaticField_1;

public class StaticField {

	public static void main(String[]args) {
		
		/* 9.2 static 제어자
		   
		   static 클래스의 멤버(필드, 메서드, 이너 클래스)에 사용하는 제어자임. 이제까지 클래스의 멤버를 다른 클래스 내에서 사용하기 위해선
		   가장 먼저 클래스의 객체를 생성해야 함. 이렇게 객체 안에 있을 때 사용할 수 있는 상태가 되는 멤버를 인스턴스instance member
		   라고 함. 쉽게 말해서 인스턴스 멤버는 멤버 앞에 static이 붙어 있지 않은 것을 말함. 반면 앞에 static이 붙어 있는 멤버를
		   정적 멤버static member라고 함.
		   정적 멤버의 가장 큰 특징은 객체의 생성 없이 '클래스명.멤버'만을 바로 사용할 수 있음. 정적 멤버도 인스턴스 멤버처럼 객체를 먼저
		   생성한 후에 '참조 변수명.멤버명'과 같이 사용할 수 있지만, 그렇게 사용할 것이라면 애초에 정적 멤버로 만들 필요도 없음. 또한 호출된
		   모양만으로 정적 멤버라는 것을 분명히 알 수 있도록 가능한 정적 멤버는 '클래스명.멤버명'의 형태로 사용하길 권장함.
		   
		   9.2.1 인스턴스 필드와 정적 필드
		   
		   인스턴스 필드와 정적 필드를 1개씩 포함하고 있는 클래스의 예
		   
		   class A {
		      int m = 3;
		      static int n = 5;
		   }
		   
		   인스턴스 필드와 정적 필드는 사용하는 방법이 조금씩 차이가 남. 그 이유는 각 필드의 저장 위치 때문임. 메모리에서의 인스턴스 필드와
		   정적 필드와 정적 필드의 저장 공간 위치는 다음과 같음. 인스턴스 필드를 사용하기 위해서는 먼저 객체를 생성한 후
		   '참조 변수명.인스턴스 필드명'과 같이 사용할 수 있음. 인스턴스 필드인 md의 저장 공간은 객체 내부에 생성되므로 m을 사용하기 위해선
		   반드시 객체를 먼저 생성해야 함. 또한 저장 공간이 힙 메모리에 위치하므로 반드시 해당 저장 공간에 값을 읽거나 쓰기 위해서는 참조
		   변수명을 사용해야 함.
		   
		   인스턴스 필드의 활용 방법 - 객체를 생성한 후에 사용 가능
		   
		   A a = new A();
		   System.out.println(a.m); // 3
		   
		   반면 정적 필드는 '클래스명.정적 필드명'처럼 사용함. 정적 필드인 n은 클래스 내부에 저장 공간을 지니고 있기 때문에 객체 생성 없이
		   바로 사용할 수 있는 것임.
		   
		   static 필드의 활용 방법 1 - 객체를 생성하지 않고 바로 사용
		   
		   System.out.println(A.n); // 5
		   
		   이때 특이한 점은 메모리의 구조에서도 볼 수 있는 것처럼 객체 내부에서도 정적 필드인 n도 존재한다는 것. 다만 n의 실제 저장 공간은
		   정적(static) 영역 내부에 있으며, 객체 내부의 n은 실제 정적 필드의 저장 공간의 참좃값만을 포함하고 있음. 따라서 인스턴스 필드처럼
		   참조 변수명으로도 사용할 수 있음.
		   
		   static 필드의 활용 방법 2 - 객체를 생성한 후 사용(권장하지 않음)
		   
		   A a = new A();
		   System.out.println(a.n);
		   
		   
		   
		 */
		
		
	}
	
}
