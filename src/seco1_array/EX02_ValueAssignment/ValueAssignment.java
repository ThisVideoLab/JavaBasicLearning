package seco1_array.EX02_ValueAssignment;

public class ValueAssignment {
	
	public static void main(String[]args) {
		
		/* 5.1.3 1차원 배열을 생성하는 다양한 방법
		   
		   앞선 내용으로 1차원 배열을 생성하고 값을 대입하는 방법을 익힌 것 이외에, 자바에서는 배열을 생성하고 값을 대입하는 다양한 방법을
		   지원함. 앞의 방법을 포함해 1차원 배열을 생성하거나 값을 대입하는 3가지 방법에 대해 학습해보자.
		   
		   방법1) 배열 객체를 생성하고 값 대입하기
		   첫번째 방법은 앞서 알아본 것처럼 배열의 객체를 먼저 선언하고, 이후 각 인덱스 위치마다 값을 대입하는 것. 객체를 생성할 때는 배열의
		   길이가 명확히 기술되어야 하고, 값을 입력할 때는 가용한 인덱스 (0 ~ (배열의 길이 - 1))만을 사용해야 함. 그렇지 않으면 배열의
		   크기보다 더 큰 인덱스라며 exception이 출력됨.
		   
		   배열 객체를 생성하고 값 대입하기
		   
		   자료형[] 참조 변수명 = new 자료형[배열의 길이];
		   참조 변수명[0] = 값;
		   참조 변수명[1] = 값;
		   ...
		   참조 변수명[n-1] = 값;
		 */
		
		int ex1[] = new int [3];
		ex1[0] = 1;
		ex1[1] = 2;
		ex1[2] = 3;
		
		/* 방법2) 배열 객체 생성과 함께 값 대입하기
 		   
 		   두번째 방법은 배열 객체를 생성함과 동시에 값을 대입하는 방법. 이때 초깃값을 직접 넣어 주므로 컴파일러에 따른 강제 초기화 과정은
 		   생략됨. 두번째 방법에서는 객체를 생성할 때 오른쪽 항의 대괄호([])안에 배열의 길이를 지정하지 않는다는 특징이 있음. 그러나 배열의
 		   길이는 다음에 나오는 중괄호({}) 안의 추기화 데이터 개수로 결정되므로 배열의 특징을 모두 만족함.
 		   
 		   배열 객체 생성과 함께 값 대입하기
 		   
 		   자료형[] 참조 변수명 = enw 자료형[]{값, 값, ...., 값}; // 배열 길이 미지정, 배열 길이는 값의 개수로 결정됨 
 		   ex) int ex1[] = new int[]{3, 4, 5};
 		   
 		   방법3) 대입할 값만 입력하기
 		   
 		   마지막 방법은 new 키워드 없이 최가화할 값만 중괄호에 넣어 댕비하는 것. 초기화 데이터의 개수가 배열의 길이를 결정함.
 		   
 		   자료형[] 참조 변수명 = {값, 값, ..., 값};
 		   ex) int[] a = {3,4,5};
 		   
 		   변수 선언과 값 대입의 분리 가능 여부
 		   
 		   방법3은 방법2에서 new int[]를 생략한 형태임. 만일 방법2와 방법3이 완벽히 동일하다면 굳이 상대적으로 복잡한 방법2를 쓸 필요는
 		   없음. 그러나 방법3에서는 변수 선언과 값이 대입을 분리할 수 없다는 제약 조건이 있음. 즉 선언과 동시에 값을 대입할 때만 사용 가능.
 		   일견 큰 문제는 없어 보이지만, 일부 기능에 있어서는 사용이 불가능하니, 일일히 그 조건을 알기보다는 원리를 이해할 것.
		     
		 */
		
		/*방법2 선언과 객체 대입 분리 가능*/ System.out.println("방법2 선언과 객체 대입 분리 가능");
		
		int[] ex2 = new int[] {3,4,5}; // 가능 
		int[] ex3;
		ex3 = new int[] {3,4,5}; // 분리 가능
		
		/*방법3 선언과 객체 대입 분리 불가능*/ System.out.println("방법2 선언과 객체 대입 분리 불가능");
		
		int[] ex4 = {3,4,5}; // 가능 
		int[] ex5;
		// ex5 = {3,4,5}; // 분리 불가능
		System.out.println();
		
		/*배열의 값 대입 방법1*/ System.out.println("배열의 값 대입 방법1");
		
		int[] array1 = new int[3]; // 3칸짜리 배열 원소 값을 강제 초기화 
		array1[0] = 3; // 각 인덱스 별 값 입력
		array1[1] = 4;
		array1[2] = 5;
		System.out.println(array1[0] +" "+ array1[1] +" "+ array1[2]);
		System.out.println();
		
		/*배열의 값 대입 방법2*/ System.out.println("배열의 값 대입 방법2");
		
		int [] array2;
		array2 = new int [3]; // 배열 선언과 객체 대입을 분리 가능
		array2[0] = 6;
		array2[1] = 7;
		array2[2] = 8;
		System.out.println(array2[0] +" "+ array2[1] +" "+ array2[2]);
		
		int[] array4; // 배열 선언과 객체 대입을 분리 가능
		array4 = new int[] {9,10,11};
		System.out.println(array4[0] + " " + array4[1] + " " + array4[2]);
		System.out.println();
		
		/*배열의 값 대입 방법3*/ System.out.println("배열의 값 대입 방법3");
		
		int [] array5 = {12,13,14}; // 배열 선언과 객체 대입을 한번에, 강제 초기화 생략 
		System.out.println(array5[0] + " " + array5[1] + " " + array5[2]);
		
	}

}
