package sec01_packageimport.EX00_PackageImport;


public class PackageImport {

	public static void main(String[]args) {
		
		/* 8장 클래스 외부 구성 요소
		   8.1 패키지와 임포트
		   8.1.1 패키지
		   
		   패키지는 비슷한 목적으로 생성된 클래스 파일들을 한곳에 모아둔 폴더임. 프로그램을 작성하다 보면 각각의 목적에 따라 여러 개의 클래스
		   파일(네트워크 처리를 위한 클래스 10개, GUI 처리를 위한 클래스 8개 등)들이 생김. 이렇게 동일한 목적으로 만들어진 클래스들을
		   1개의 공간(폴더)에 묶어 관리하기 위해 사용하는 것이 바로 '패키지'라는 개념임. 1개의 프로젝트에 1개의 패키지를 생성할 수도 있고,
		   여러 개의 패키지를 생성할 수도 있음. 심지어 패키지를 아예 생성하지 않아도 문법적으로는 문제가 없음. 생성된 패키지를 폴더의 구조상으로
		   보면 SRC 폴더의 하위 폴더에 위치하게 됨. 컴파일이 수행되면 바이트 코드가 저장되는 bin 폴더에도 동일한 하위 폴더가 생성됨.
		   
		   예를 들어 다음과 같이 소스 코드를 생성하는 과정에서 패키지를 지정하지 않고 소스 파일(PackgeTest1.java)을 생성할 때와
		   mypack.test라는 이름의 패키지를 생성하고 이 패키지 아래에 소스 파일(PackageTest2.java)을 생성할 때를 고려해보자.
		   패키지를 지정하지 않으면 src 폴더 아래에 default package 안에 자동으로 생성해주는 것을 기억 할 것임. 패키지를 지정하게 되면
		   패키지가 존재하는 경우에는 해당 패키지 내부에 생성해주고, 없다면 이름 지은대로 생성해 줌.
		   
		   이러한 차이 말고도, 패키지를 생성하지 않은 경우에는 보통 소스 코드의 첫번째 줄에 항상 표시되는 패키지 명이 별도로 존재하지 않게 됨.
		   역으로 소스 코드 첫줄에 패키지 이름이 없다면 해당 파일이 default 패키지 안에 있다고 판단할 수 있을 것.
		   
		   패키지가 관리의 용이성 말고도 또 다른 장점이 있는데, 그것은 패키지의 영향으로 클래스가 저장되는 공간이 분리되어 클래스명의 충돌을
		   방지할 수 있다는 것. 만일 동시에 2 사람이 프로젝트 doit 내에서 2개의 작업을 한다고 가정해보자. 클래스명이 content라면 나중에
		   클래스들을 통합할 때 문제가 발생할 수 있음. 그러나 패키지를 userA, userB로 나눠 놓으면 doit.userA.content와 같은 식으로
		   나눌 수 있기 때문에 클래스 명이 다르더라도 경로가 다르므로 충돌 문제를 막을 수 있음.
		   
		   8.1.2 임포트
		   
		   임포트는 다른 패키지 내의 클래스를 사용하기 위한 문법 요소로, 소스 코드상에서 패키지 구문의 다음 줄에 위치함. 프로그램이 동작할 때는
		   일반적으로 자신의 패키지 내부에 위치한 클래스만을 사용할 수 있음. 그러나 자바는 API를 제공하기도 하고 다른 개발자가 만든 패키지에
		   위치한 클래스를 사용하기 위한 2가지 방법을 제공함.
		   
		   방법1) 클래스의 풀네임 사용
		   
		   다른 패키지의 클래스를 사용하는 첫 번째 방법은 클래스의 풀네임을 사용하는 것. 클래스의 풀네임은 '패키지명.클래스명'임. 쉽게 말하자면
		   패키지명은 클래스의 성이고, 클래스명은 클래스의 이름이라고 생각하면 쉬움. 자신이 속한 패키지 내의 클래스들은 이름만 부르듯 클래스명만
		   사용해 소환이 가능함. 그러나 다른 패키지 내의 클래스를 사용할때는 풀네임, 즉 패키지명과 클래스명을 명시해야 함.
		   관련 내용은 PackageImport_1.java 파일에서 확인 가능함.
		   
		   방법2) 임포트 사용
		   
		   다른 패키지의 클래스를 사용하는 첫 번째 방법은 직관적이지만, 너무 번거로움. 이때 사용할 수 있는 방법이 바로 임포트 기능임.
		   소스 코드 상단에 미리 자주 사용할 클래스를 풀네임을 곁들여 임포트 해 두면 그 뒤로 해당 java 파일 내에서는 마치 자기의 것처럼
		   사용이 가능해짐.
		   관련 내용은 PackageImport_2.java 파일에서 확인 가능함.
		   
		   
		 */
		
	}
	
}
