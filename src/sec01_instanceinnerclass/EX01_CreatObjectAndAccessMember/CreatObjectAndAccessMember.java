package sec01_instanceinnerclass.EX01_CreatObjectAndAccessMember;

class A{ // 아우터 클래스
	   
    class B{ // 멤버 이너 클래스 - 인스턴스 멤버 클래스
       // ...
    }
    
    static class C { // 멤버 이너 클래스 - 정적 멤버 클래스
       // ...
    }
    
    void abc() {
       class D{ // 지역 이너 클래스 - 지역 클래스
          // ...
       }
    
    }
} 

class A2{
	    class B2{
	    	void abc(){
	    	   System.out.println("아우터 클래스 A2의 이너 클래스 B2의 abc()메서드");
	    	}
	    }
}

class A3 {
	public int a3 = 3;
	protected int b3 = 4;
	int c3 = 5;
	private int d3 = 6;
	void abc() {
		System.out.println("A3 클래스의 abc() 메서드");
	}
	// 인스턴스 이너 클래스
	class B3{
		// 아우터 클래스의 필드 사용
		void bcd() { // 이너 클래스는 아우터 클래스의 모든 멤버를, 지정 접근자 상관 없이 이용 가능
			System.out.println("A3 클래스 이너 클래스 B3의 bcd() 메서드");
			System.out.println(a3);
			System.out.println(b3);
			System.out.println(c3);
			System.out.println(d3);
			abc(); // 아우터 클래스의 메서드도 마찬가지로 이용 가능.
		}
		
	}
}

class CreatObjectAndAccessMember {

	public static void main(String[] args) {
		
		/* 13.1 이너 클래스
		   
		   클래스 내부에 포함되는 이너 클래스(inner class)는 인스턴스 멤버 이너 클래스, 정적 멤버 이너
		   클래스, 그리고 지역 이너 클래스로 나뉨.
		   
		   이너 클래스의 종류
		   
		   class A{ // 아우터 클래스
		   
		      class B{ // 멤버 이너 클래스 - 인스턴스 멤버 클래스
		         // ...
		      }
		      
		      static class C { // 멤버 이너 클래스 - 정적 멤버 클래스
		         // ...
		      }
		      
		      void abc() {
		         class D{ // 지역 이너 클래스 - 지역 클래스
		            // ...
		         }
		      
		      }
		  } 
		   
		 인스턴스 멤버와 정적 멤버 이너 클래스는 필드와 메서드처럼 클래스의 멤버인 반면, 지역 이너 클래스는
		 메서드 내에서 정의하며, 지역 변수처럼 해당 메서드 내부에서만 한정적으로 사용되는 클래스임. 그럼 이너
		 클래스의 종류를 하나씩 알아보도록 하자.  
		 
		 13.1.1 인스턴스 멤버 이너 클래스
		 
		 인스턴스 멤버 이너 클래스는 이름에서도 알 수 있듯이, 인스턴스 즉 객체 내부에 멤버 형태로 존재함.
		 이때 자신을 감싸고 있는 아우터 클래스 outer class의 모든 접근 지정자 멤버에 접근이 가능함.
		 인스턴스 멤버 이너 클래스 자체도 아우터 클래스의 멤버이므로 당연한 이야기임. 소스 파일(.java)이
		 1개라 하더라도 컴파일을 수행하면, 각 클래스별로 바이트 코드(.class) 파일이 생성되는데, 이너
		 클래스 또한 이와 마찬가지임. 다음과 같이 아우터 클래스 내부에 1개의 이너 클래스가 존재할 때를 
		 생각해보자.
		 
		 class 아우터 클래스 {
		    class 이너 클래스{
		       //...
		    }
		 }
		 
		 아우터 클래스의 바이트 코드로 '아우터 클래스.class' 인스턴스 멤버 이너 클래스의 바이트 코드로
		 '아우터 클래스$이너 클래스.class' 파일이 생성됨. 이너 클래스로 생성되는 파일명에서 볼 수 있는
		 것처럼 이너 클래스는 독립적으로 사용할 수 없고, 반드시 아우터 클래스를 이용해야만 사용이 가능함.
		 
		 인스턴스에서 이너 클래스 객체 생성하기
		 
		 이번에는 인스턴스 멤버 이너 클래스의 객체를 생성하는 방법을 알아보자. 앞에서 말한 것처럼 인스턴스
		 멤버 이너 클래스는 아우터 클래스의 객체 내부에 존재함. 따라서 이너 클래스의 객체를 생성하기 위해서는
		 먼저 아우터 클래스의 객체를 생성해야 함. 이후 생성한 아우터 클래스 객체의 참조 변수를 활용해 객체
		 내부에 있는 이너 클래스의 생성자를 다음과 같이 호출함.
		 
		 인스턴스 멤버 이너 클래스의 객체 생성 방법
		 
		 아우터 클래스 아우터 클래스 참조 변수 = new 아우터 클래스();
		 아우터 클래스.이너 클래스 이너 클래스 참조 변수 = 아우터 클래스 참조 변수.new 이너 클래스();  
		 
	 	 class A2{
	 	    class B2{
	 	    	void abc(){
	 	    	   System.out.println("아우터 클래스 A2의 이너 클래스 B2");
	 	    	}
	 	    }
	 	 }
		 
		 */
		
		A2 a2 = new A2();
		A2.B2 b2 = a2.new B2();
		
		b2.abc();
		System.out.println();
		
		/* 여기서 한가지 주의해야 할 점은, 이너 클래스 객체의 자료형은 B2가 아니라 A2.B2라는 것.
		   그 이유는 생성된 바이트 코드가 A2$B2.class 이기 때문임. 다시 말하자면, 이너 클래스는 
		   B2 b2와 같이 단독으로 쓰일 수 없으며, 반드시 A2.B2 b와 같이 아우터 클래스를 이용해야지만
		   선언할 수 있음.
		   객체를 사용하는 모습이 다소 특이하지만, 인스턴스 이너 클래스 자체가 아우터 클래스 객체 내부에
		   존재한다는 점을 이해하면 이렇듯 특이한 문법 또한 이해가 가는 바임.
		   
		 */
		
		/*- 실습 - 인스턴스 이너 클래스의 아우터 클래스 멤버 사용 및 객체 생성*/
		System.out.println("- 실습 - 인스턴스 이너 클래스의 아우터 클래스 멤버 사용 및 객체 생성");
		System.out.println();
		
		// 아우터 클래스 객체 생성	
		
		A3 a3 = new A3();
		
		// 멤버 사용
		
		A3.B3 b3 = a3.new B3();
		b3.bcd();

	}

}
