package sec02_primarydatatype.EX01_FlaootVsDouble;
//2.3 자료형의 종류
public class FlaootVsDouble {

	public static void main(String[]args) {
	
	/* 2.3 자료형의 종류
	 자료형은 크게 기본 자료형과 참조 자료형으로 구분 가능. 자바에는 8가지 기본 자료형이 있으며, 그 외는 모두 참조 자료형.
	 참조 자료형은 정형화된 것이 아니라 개발자 임의로 무한대로 추가가 가능함.
	 
	 기본 자료형
	 boolean - 참, 거짓, ture, false
	 byte, short, int, long - 정수: ..., -1, 0, 1...
	 float, double - 실수: -5,4, 1,7, ...
	 문자(정수): 'A', 'B'
	 
	 참조 자료형
	 객체(Object): 배열 클래스, 인터 페이스
	 
	 자료형을 구분해야 하는 이유는 그 형마다 값의 저장 방식이 서로 다르기 때문. 이를 이해하기 위해서는 메모리 구조의 이해가
	 선행되어야 하는데. 메모리 영은 목적에 따라 크게 3가지로 불리는데,
	 
	 첫번째 영역 - 클래스class 영역, 정적static 영역, 상수final 영역, 메서드method 영역으로 불리움.
	 두번째 영역 - 스택 영역 (변수 저장)
	 세번째 영역 - 힙 영역 (객체 저장)
	 * 실제론 네번째 레지스터 영역도 있으나 개발자 관점에서는 3번째 영역가지만 고려하면 됨
	 
	 2.3.1 기본 자료형과 참조 자료형의 차이
	 
	 자료형의 이름규칙
	 
	 기본 자료형과 참조 자료형의 첫번째 차이점은 자료형 자체의 이름 규칙에 있음. 자바에서 제공하는 기본 자료형 8개의 이름은
	 모두 소문자로 시작하는 반면, 참조 자료형의 이름은 모두 대문자로 시작함. 다만 이는 권장 사항이기에, 오류를 발생시키지 않으나
	 개발자 사이의 무언의 약속인 만큼 유지보수를 위해 반드시 통일해줄 것
	 
	 실제 데이터 값의 저장 위치
	 
	 기본 자료형과 참조 자료형의 두번째 차이점은 실제 데이터 값의 저장 위치가 다르다는 것. 기본 자료형과 참조 자료형 모두 변수의
	 공간이 스택 메모리에 생성되지만 그 공간에 저장되는 값의 의미가 서로 다름. 
	 기본 자료형은 스택 메모리에 생성된 공간에 실제 변수값을 저장.
	 참조 자료형은 실제 데이터 값은 힙 메모리에 저장하고, 
	 		   스택 메모리의 변수 공간에는 실제 데이터 값이 저장된 힙 메모리의 위치 값을 저장함.
	 
	 2.3.2 기본 자료형의 메모리 크기와 저장할 수 있는 값의 범위
	 
	 	  자료형       자료크기   값의 범위     
	 부울대수 boolean   1byte   true, false
	 정수    byte      1byte   -2^7 ~ 2^7-1
	       short     2byte   -2^15 ~ 2^15-1
	       int       4byte   -2^31 ~ 2^31-1
	       long      8byte   -2^63 ~ 2^63-1
	 실수   float      4byte  +-(1.40*10^-45 ~ 3.40*10^38)
	       double    8byte   +-(4.94*10^-234 ~ 1.79*10^308)
	 문자   char       2byte   유니코드 문자(0~2^16-1)
	 
	 여기서 각 정수 자료형의 값 범위는, n개의 비트bit로 표현 할 수 있는 정수는 2n개임. 가령 2bit로 표현 할 수 있는
	 정수는 2^2=4개(00,01,10,11)임. n개의 bit라면, 음수와 양수 그리고 0을 고려하면 각각 절반으로 나눠
	 0미만부터 -2^(n)까지의 음수와, 0 이상부터 2^(n-1)-1 까지의 양수가 포함 됨.  
	 이러한 방법을 가지고 각 자료형의 크기만 안다면 쉽게 그 범위를 계산 할 수 있음.
	 
	 일반적으로 flaot의 정밀도는 소수점 7자리, double의 정밀도는 소수점 15자리 정도임.
	 */
	
		//float의 정밀도 (대략 소수 7자리)
		
		float f1 = 1.0000001f; // 7자리
		System.out.println(f1); // 1.0000001을 정상 출력함
		
		float f2 = 1.00000001f; // 8자리
		System.out.println(f2); // 1.0으로 오차 있는 값을 출력함
    
		//double의 정밀도 (대략 소수 15자리)
		
		double d1 = 1.000000000000001; // 15자리
		System.out.println(d1); // 1.000000000000001을 정상 출력함
		
		double d2 = 1.00000000000000001; // 16자리
		System.out.println(d2); //1.0으로 오차 있는 값을 출력함
		
		// 이 모든 것을 외우기보단 자료형에 따른 메모리 할당 크기, 저장 범위, 그로 인한 오차 가능성에 대해 인지 할 것
	}
	
}
