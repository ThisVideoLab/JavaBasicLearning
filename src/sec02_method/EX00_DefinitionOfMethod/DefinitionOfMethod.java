package sec02_method.EX00_DefinitionOfMethod;

public class DefinitionOfMethod {
	
	public static void main(String[]args) {
		
		/* 7.2 메서드
		   7.2.1 메서드 정의하기
		   
		   메서드는 클래스의 기능에 해당하는 요소임. 가령 사람 클래스라면 행동, 자동차 클래스라면 구동에 관한 것들이 메서드를 구성할 것임.
		   먼저 메서드의 정의에 대한 문법 구조를 살펴보면 다음과 같음.
		   
		   ex) 자바 제어자 리턴(반환) 타입 메서드명(입력매개변수) {
		   	      메서드 내용
		       }
		   ex) public static int sum(int a, int b) {
		   	      // 메서드 내용
		   }
		   
		   리턴 타입은 메서드 종료 이후 변환(또는 반환)되는 값의 자료형을 의미함. 메서드명은 변수명 선정 규칙과 동일하며, 관례적으로 소문자로
		   시작함. 이후 소괄호 안에는 입력매개변수가 들어오는데, 이는 메서드를 호출할 때 전달되는 값의 자료형과 전달 받은 값의 지역 변수명을
		   나타냄. 마지막 중괄호 안에는 메서드의 내용이 들어가는데, 여기에 메서드가 수행해야 할 기능을 작성해 넣음.
		   지금까지의 내용을 정리해 앞의 예제를 설명하자면, 'int형 변수 2개의 값을 입력 받아 처리하고, 메서드가 종료된 이후에 int 값을 
		   리턴함' 정도로 정리가 가능함. 리턴 타입은 void가 아닐 때 메서드 안에는 반드시 return 리턴값의 코드가 있어야 함. 위 예제에서는
		   메서드 내용의 마지막에 'return 정숫값'의 코드가 반드시 있어야 오류가 발생하지 않을 것임.
		   
		   7.2.2 여러 리턴 타입의 메서드 살펴보기
		   
		   여러 리턴 타입 중에서도 void 타입은 제일 특이한 것이, void는 아무런 리턴값도 반환하지 않는 리턴 타입임. 그렇다고 해서 마냥
		   아무것도 없진 않은 것이, 보통은 void 타입의 메서드 안에 실행 구문을 넣어서 명목적인 리턴 값은 없더라도 실행 구문을 통해서 메서드의
		   역할을 수행하게 됨. 고로 이러한 void가 주는 작은 혼동에 주의하는 것이 좋음.
		   
		   void print() { // 아무것도 반환하지 않는 void 타입의 메서드
		      System.out.println("안녕"); // 하지만 내부 코드에서 출력 기능을 실행함.
		   }
		   
		   두번째 예제는 리턴 타입이 평범한 int이고 입력매개변수는 없을 때로, data() 메서드 호출 이후에는 값이 3으로 변환 될 것임.
		   당연히 이 메서드는 void 리턴형이 아니므로 메서드의 내용 마지막에는 리턴 값을 포함해야 함. 고로 리턴값을 입력해줘야 함.
		   
		   int data() {
		   return 3;
		   
		   마지막은 리턴 타입도 void가 아니고 입력매개변수도 포함된 예제로, int형과 double형의 데이터를 하나씩 받아 최종적으로
		   double형을 리턴하는 메서드임.
		  
		  double sum(int a. double b){
		  return a + b;
		   
		 */
		
	}

}
