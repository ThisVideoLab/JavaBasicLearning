package sec02_typecasting.EX1_Typecasting_1;


// 클래스의 상속관계

class A{}
class B extends A{}
class C extends B{}
class D extends B{}

public class Typecasting_1 {
	
	public static void main(String[]args) {
		

		/* 10.2 객체의 타입 변환
		   
		   기본 자료형에서도 언급했듯이 자바 프로그램은 등호(=)를 중심으로 항상 왼쪽과 오른쪽의 자료형이 일치해야 함. 만일 자료형이 서로 다를 경우
		   컴파일러가 자동으로 타입을 변환해주거나 개발자가 직접 명시적인 타입 변환을 해줘야 함. 객체에서도 이러한 타입 변환이 일어나는데 이를 각각
		   업캐스팅, 다운 캐스팅이라고 칭함.
		   
		   10.2.1 객체의 업캐스팅과 다운캐스팅
		   
		   기본 자료형에서 업캐스팅은 범위가 좁은 쪽에서 넓은 쪽으로 캐스팅하는 것을 말하며, 다운 캐스팅은 그 반대의 의미. 객체에서는 자식 클래스에서
		   부모 클래스 쪽으로 변환되는 것이 업캐스팅, 그 반대가 다운캐스팅임. 객체는 항상 업캐스팅할 수 있으므로, 명시적으로 하지 않아도 자동으로
		   컴파일러가 대행을 해줌. 그러나 다운 캐스팅은 개발자가 직접 해줘야한다는 차이가 있음. 이는 값이 달라질 수 있기 때문임.
		   
		   가령 '학생은 사람이다'라는 명제는 항상 참임.반면 반대인 '사람은 학생이다'라는 명제는 화살표를 거스르는 방향이므로 틀린 표현이 됨. 물론
		   사람 중에 학생인 경우도 있기 때문에, '항상 성립하지 않는다' 정도로 정리될 수 있음. 고로 캐스팅의 중요 포인트는 객체가 어떠한 
		   자료형으로 객체가 생성되었는지임. 
		   
		 */
		
		 // 수동 타입 변환(다운 캐스팅)
		
		B b1 = new B();
		A a1 = b1; // b1을 그냥 대입하더라도 컴파일러가 A 자료형에 맞게 b1을 업캐스팅함 
		A a2 = (A) b1; // 명시적 표현도 가능함    
			
		C c2 = new C();
		B b2 = (B) c2;
		B a3 = (B) c2;
		
		double n1; // 더 큰 범위의 자료형
		int n2 = 2; // 더 작은 범위의 자료형
		double n3 = n2; // 더 작은 자료형(int)에서 더 큰 자료형(double)으로 업캐스팅이 발생
		System.out.print(n3); // 2.0 doublce 형식으로 출력됨
		
		/* 10.2.2 메모리로 이해하는 다운 캐스팅
		   
		   다운 캐스팅은 메모리 구조와도 관계가 있음. 메모리에서의 동작만 잘 이해하면 캐스팅의 가녕 여부뿐만 아니라 선언도니 타입에 따른
		   차이점까지 파악이 가능함. A <- B <- C의 상속 관계일 때를 고려해 보자. 먼저 A a = new B()를 살펴보면 실제 객체는
		   B() 생성자로 만들었음. 다만 A 객체를 먼저 메모리에 만들고 이후에 B 객체를 완성하기 때문에, A를 품고 있는 B 객체가 생성됨.
		   다만 이는 A 자료형 타입의 참조변수 a를 통해 이 객체를 가리키고 있는 상황임. 이때 실제 참조 변수는 힙 메모리의 B 객체 안에 있는
		   A 객체를 가라키게 된다는 것. 이러한 구조를 이해하는 것이 매우 중요함. 선언된 타입이 의미하는 바는 실제 객체에서 자신이 선언된
		   타입의 객체를 가리키게 되는 것. 이러한 가리킴이 A 타입으로 만든 B 객체라는 독특한 구조를 잘 설명함.
		   이 상태에서 객체가 A 객체가 아닌 B 객체를 가리키도록 하기 위해서는 A <- B에서 화살표 방향을 거스르는, 다운 캐스팅이 필요하게 됨.
		   그때는 a 변수 앞에 (B) 코드를 추가해 다운 캐스팅을 수동으로 해줘야 함. 추가로 만약 C 타입이 있을 경우, a에 대한 C타입으로의
		   다운 캐스팅은 불가능함. 이는 참조 변수 a가 가리키는 객체 전체 어디에도 C 타입이 없기 때문임. 그러므로 어떤 생성자로 만들었는지가
		   중요한 문제가 됨. 
		 
		 */
		
		/*- 실습 - 클래스의 업캐스팅 및 다운캐스팅*/ System.out.println("- 실습 - 클래스의 업캐스팅 및 다운캐스팅");
		
		// 업 캐스팅(자동 변환): 캐스팅 구문을 생략했을 때 컴파일러가 자동으로 추가함.
		
		A ac = (A) new C(); // C to A 업캐스팅(자동 변환) A의 생성자를 활용해서 A 객체가 내포된 C 타입의 변수 ac를 생성함.
		B bc = (B) new C(); // C to B 업캐스팅(자동 변환) B의 생성자를 활용해서 B 객체가 내포된 C 타입의 변수 ac를 생성함.
		
		B bb = new B(); // B 생성자로 B 타입의 참조 변수 생성 - 단순 생성
		A a = (A) bb; // B to A 업캐스팅(자동 변환) A의 생성자를 활용해서 A 객체가 내포된 B 타입의 변수 ac를 생성함. 
		 
		// 다운 캐스팅 (수동 변환): 캐스팅 할 수 없을 때 (실행할 때 예외 발생)
		
		A aa = new A(); // A 생성자로 A 타입의 참조 변수 생성 - 단순 생성
		// B b = (B) aa; // A to B 다운 캐스팅(수동 변환)은 불가능함.
		// C c = (C) aa; // A to C 다운 캐스팅(수동 변환)은 불가능함.
		
		// 다운 캐스팅 (수동 변환): 캐스팅이 가능한 경우
		
		A ab = new B();
		B b = (B) ab; // A to B 다운 캐스팅(수동 변환) // 내부에 A 객체를 포함하고 있으므로 가능함. 
		
		
		
		 
	}

}
