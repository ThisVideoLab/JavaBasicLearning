package sec01_array.EX01_ArrayDefinition;

public class ArrayDefinition {

	public static void main(String[]args) {
		
		/* 5장 참조 자료형
		   5.1 배열
		   5.1.1 배열이란?
		   
		   자바에서 8개의 기본 자료형 이외의 모든 자료형은 모두 참조 자료형임. 참조 자료형은 개발자가 얼마든지 정의할 수 있으므로 
		   무한대이긴 하지만, 대표적인 참조 자료형에는 배열array, 클래스calss, 인터페이스interface 등이 있음. 
		   그 중에서 배열은 동일한 자료형을 묶어 저장하는 참조 자료형으로, 생성할 때 배열의 크기를 지정해야 하고, 한번 크기를 지정하면
		   절대 변경할 수 없는 특징이 있음.
		   
		    5.1.2 배열 생성하기
		    
		    배열을 선언할 때는 다음과 같이 2가지 방법으로 선언이 가능함. 배열을 나타내는 대괄호 ([])는 자료형 뒤에 올 수 있고,
		    변수명 뒤에도 올 수 있음. 
		    
		    1단계) 1차원 배열의 선언 방법
		    
		    자료형 [] 변수명  /  자료형 변수명[]
		    
		    예) int [] a;    / int a[]; // int 자료형만 저장 가능
		       double [] b; / double b[]; // double 자료형만 저장 가능
		       String [] c; / String c[]; // String 자료형만 저장 가능
		       
		   여기서 1가지 의문이 발생하는 것이, 정수 자료형을 int라는 이름으로 만들었고, 실수 자료형을 double이라는 이름으로 만든 것처럼
		   배열 자료형도 array 정도의 이름으로 만들면 편할 텐데 왜 '자료형[]' 형식을 사용하는 것일까? 여기서 배열의 첫 번째 특징을
		   알 수 있음. 배열은 동일한 자료형만 묶을 수 있는 자료형인데, 만일 array a와 같이 배열이 어떤 자료형으로 묶은 것인지 알 길이 없음.
		   그래서 int [] a, String [] b와 같이 선언해 배열 자료형을 보자마자 어떤 타입을 묶은 것인지 알 수 있도록 하는 것.
		   
		   배열을 선언하면 스택 메모리에 변수 공간만 생성하고, 공간 안은 비운 채로 둠. 아직 배열의 실제 데이터인 객체를 생성하지 않았기 때문.
		   스택 메모리에 위치하고 있는 참조 자료형 변수의 빈 공간을 초기화할 때는 null 값을 사용할 수 있음. null 값은 힙 메모리의
		   위치(번지)를 가리키고 있지 않다는 의미. 즉 연결된 실제 데이터가 없다는 것을 의미함.
		   
		   cf) 자바의 메모리 구조
		   
		   자바의 메모리 구조는 앞서 익힌 것처럼 다음 3개의 ㅇ여역으로 구성되어 있음.
		   
		   ( 클래스 영역, 정적 영역, 상수 영역, 메서드 영역 )
		   ( 스택 영역 ) - 기본 자료형, 참조 자료형을 포함한 모든 지역 변수가 위치함
		   ( 힙 영역 ) - 객체가 위치하는 공간이며, 객체는 참조 자료형 변수가 가리키는 실제 데이터의 개념
		   
		   2단계) 힙메모리에 배열의 객체 생성하기
		   
		   모든 참조 자료형의 실제 데이터(객체)는 힙 메모리에 생성됨. 힙 메모리에 객체를 생성하기 위해서는 new 키워드가 필요함.
		   
		   new 자료형[배열의 길이]
		   ex) new int[3];
		       new String[5];
		       
		   배열의 객체 생성 과정에서 나타나는 두 번째 특징은, 배열 생성시에 new int[3] 또는 new String[5]와 같이 배열의 길이를 반드시
		   지정해야 한다는 것. 가령 배열의 길이를 지정하지 않고 new int[]와 같이 명령하면 오류가 발생함.
		   
		   new int[3]; // 정수 자료형 3개를 포함할 수 있는 배열 객체 생성
		   new double[5]; // 실수 자료형 5개를 포함할 수 있는 배열 객체 생성
		   new String[10]; // 문자열 자료형 10개를 포함할 수 있는 배열 객체 생성
		   new int[]; // 객체의 크기를 지정하지 않아 오류 발생
		  
		   3단계) 배열 자료형 변수에 객체 대입하기
		   
		   선언된 배열의 참조 자료형 변수에 생성한 객체를 대입하는 데는 2가지 방법이 있음. 첫 번째는 변수 선언과 값(참조 자료형은 개체)의 대입을
		   한번에 작성해도 되고, 따로 구분해서 작성해도 됨. 이는 기본 자료형에서 int a = 3과 같이 선언 값을 한번에 대입하거나, int a로
		   변수를 선언한 후 a = 3으로 값을 대입할 수 있는 것과 표현 방식만 다르지 동일한 개념임.
		   
		   배열 참조 자로형 변수에 생성한 객체 대입
		   
		   자료형[] 변수명 = new 자료형[배열의 길이]; 
		   예) int [] a = new int[3];
		   
		   자료형[] 변수명;
		   변수명 = new 자료형 [배열의 길이]; 
		   
		   예시 코드 중 배열 선언과 동시에 값을 대입한 첫 번째 코드를 각 구성 요소별로 뜯어보면, 먼저 int[]는 int 자료형만을 저장하는 있는
		   배열을 의미함. a는 참조 변수로, 실제 데이터값을 저장하는 것이 아니라 힙 메모리에 실제 저장된 데이터의 값의 위치값을 저장함. 
		   new 키워드는 힙 메모리에 객체를 넣으라는 의미이고, int[3]은 정수 3개를 저장할 수 있는 공간을 만들라는 의미임. 이를 정리하자면
		   'int 자료형 3개를 저장할 수 있는 공간을 힙 메모리에 넣어두고, 어디에 넣었는지를 참조 변수 a에 저장하라'는 의미인 것.
		    
		   주의해야 할 점으론, 힙 메모리는 어떤 상황에서 빈 공간이 존재하지 않는다는 것. 그래서 할당된 공간에 값을 주지 않으면 실행할 때
		   컴파일러가 값을 강제로 초기화 값으로 만듦. 강제 초기화 값은 자료형에 따라 다른데 기본 자료형일 때 숫자는 모두 0(실수는 0.0),
		   불리언은 false로 값이 초기화되며 이외의 모든 참조 자료형은 null 값으로 초기화가 됨. 이는 별도로 값을 주지 않으면 빈 공간으로
		   존재하는 스택 메모리 공간과는 차이점을 지님.
		   
		   객체 위치를 참조 변수에 저장하는 이유
		   
		   new 키워드를 이용해 객체를 생성하면 자바 가상 머신은 힙 메모리 내에 비어 있는 공간에 객체를 생성함. JVM에서 런타임 시에 
		   동적으로 할당하여 사용하는 힙 메모리에 비어 있는 공간은 그때그때 다를 것이므로 객체가 생성될 때마다 다른 위치에 저장됨. 고로
		   자바 가상 머신이 생성한 객체의 위치를 반드시 알아야 개발자가 해당 객체를 꺼내 사용할 수 있음. 비유하자면 무인 대여 사물함을 통해
		   물건을 전달 받으려 할 때 물건 넣은 사물함의 번호를 알려줘야만 내가 가서 물건을 꺼낼 수 있는 상황과 유사하다는 것.
		   
		 */
		
		/*- 실습 - 1차원 배열의 2가지 선언 방법과 다양한 배열 선언의 예*/ System.out.println("- 실습 - 1차원 배열의 2가지 선언 방법과 다양한 배열 선언의 예");
		/*배열의 선언 방법 1*/ System.out.println("배열의 선언 방법 1");
		
		int[] array1 = new int[3]; // 변수 선언과 초기값 할당을 한번에
		int[] array2; // 변수 선언과 할당을 분리하여 
		array2 = new int[3]; // 
		System.out.println();
		
		/*배열의 선언 방법 2*/ System.out.println("배열의 선언 방법 2");
		int array3[] = new int[3];
		int array4[];
		array4 = new int[3];
		System.out.println();
		
		/*다양한 배열 선언*/ System.out.println("다양한 배열 선언");
		
		boolean[] array5 = new boolean[3];
		int[] array6 = new int [5];
		double[] array7 = new double[7];

		/* 4단계) 객체에 값 입력하기
		   이제는 생성한 객체에 값을 입력하는 방법을 알아보자. 배열은 값을 저장 할 수 있는 공간마다 방 번호가 있는데, 이를 인덱스index라고 함.
		   인덱스는 0부터 시작하며, 1씩 증가함. 그도 그럴것이 1번방, 2번방은 있어도, 3과 2/3번빼 방은 없기 때문임. 이 때 헤리포터는 논외.
		   인덱스를 이용해 각 저장 공간에 값을 대입하는 방법은 다음과 같음.
		   
		   참조 변수명[인덱스] = 값;
		 */
		
		int[] ex1 = new int[4]; // 방이 4개인 배열을 생성
		ex1[0] = 4;
		ex1[1] = 8;
		ex1[2] = 8;
		ex1[3] = 5; // 만약 이 다음으로 인덱스 4에 값을 넣으려면 exception 오류 발생.
		
		/* ex1 = int[3]과 같이 처음 배열을 선언함과 동시에 객체를 생성하면 힙 메모리의 모든 값은 초기화됨. 이 때 배열의 자료형이
		   정수이므로 초기화되는 값은 0임. 그 후에 각 방마다 인덱스를 사용해서 값을 넣어줄 수 있음. 다만 여기서 주의점으론, 방의 번호가
		   0번부터 시작하므로 n번째 방은 사실상 인덱스 (n-1)d에 해당한다는 것임. 이러한 혼동을 이용해 인덱스에 대한 이해를 테스트할 수도 있음.
		   
		   값을 읽을때도 다음과 같이 인덱스를 사용함.
		   
		   참조 변수명[인덱스];
		   예) System.out.println(a[0]); // 3
		      System.out.println(a[1]); // 4
		      System.out.println(a[2]); // 5
		   
		   배열의 저장 공간에 값을 대입하거나 읽을 때, 없는 인덱스를 사용하면 예외exception가 발생하면서 프로그램이 종료됨.
		 */
		
		System.out.print(ex1[0]);
		System.out.print(ex1[1]);
		System.out.print(ex1[2]);
		System.out.print(ex1[3]);
		// System.out.println(ex1[4]); // 예외가 발생하면서 콘솔 값에 다른 내용 없이 예외 관련 내용만 출력됨
		System.out.println();
		System.out.println();
		
	}
	
}
