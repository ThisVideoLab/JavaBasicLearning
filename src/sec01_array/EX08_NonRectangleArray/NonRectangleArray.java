package sec01_array.EX08_NonRectangleArray;

import java.util.Arrays;

public class NonRectangleArray {

	public static void main(String[]args) {
		
		/* 5.1.8 2차원 비정방 행렬 배열
		   
		   2차원 바정방 행렬은 각 행마다 열의 길이가 다른 2차원 배열을 의미함. 값이 없다의 의미가 아니라, 방 자체의 갯수가 다른 익히 수학적으로
		   알던 행렬의 모습과는 꽤나 다른 모습임. 그러나 기본적인 개념은 2차원 정방 행렬과 완벽하게 동일함. 이유인 즉슨 2차원 정방 행렬 배열의
		   경우도 1차원으로 풀어서 저장하기 때문에 각 열의 길이가 동일하다는 점 말고는 크게 다를 점이 없는 것.
		   
		   2차원 비정방 행렬 배열의 객체를 생성하는 방법은 3가지임. int[][] a = new intp[2][3]과 같은 정방 행렬 객체 생성의 첫번째
		   방법은 구조적으로 정방 행렬만을 생성하기 때문에 사용할 수 없어서 앞서 설명했던 4가지 방법 중에 1가지가 빠진 셈이라고 할 수 있음.
		 
		 */
		
		/* 방법1) 배열 객체의 행 성분으로부터 생성하고 열 성분 생성하기
		   
		   일단 행 성분만을 먼저 생성해서 몇줄인지만 정해두고 각각의 행에 열의 성분을 다르게 추가하는 방법. 각 행마다 길이가 다른 배열을 생성해야
		   하므로 이렇게 작성할 수 밖에 없음.
		   
		   자료형[][] 참조 변수명 = new 자료형[행의 길이][]; // 열의 길이는 표시하지 않음
		   참조 변수명[0] = 첫 번째 행, 1차원 배열의 생성;
		   참조 변수명[1] = 두 번째 행, 1차원 배열의 생성; 
		   ...
		   참조 변수명[n] = n+1 번째 행, 1차원 배열의 생성;
		   
		   int[][] a = new int[2][]; // 1차원 배열 생성 방법1 사용
		   
		   a[0] = new int[2]; // 첫번째 행의 열 갯수, 방 2개
		   a[0][0] = 1;
		   a[0][1] = 2;
		   
		   a[1] = new int[3]; // 두번째 행의 열 갯수, 방 3개
		   a[1][0] = 3;
		   a[1][1] = 4;
		   a[1][2] = 5;
		   
		   int[][] a = new int [2][]; // 1차원 배열 생성 방법2 사용
		   a[0] = new int[]{1, 2};
		   a[1] = new int[]{3, 4, 5};
		   
		   예제를 살펴보면 각 행마다 크기가 다른 1차원 배열이 할당된다는 점을 제외하고는 정방 행렬과 동일함. 따라서 처음 객체를 생성하면
		   행 성분의 1차원 배열만 생성되며, 이후 각 행 성분에 1차원 배열을 할당함으로서 최종적인 2차원 배열 객체가 생성됨. 다만 주의점으론
		   각 행의 배열의 길이가 다를 수 있다는 점 정도.
		   
		   방법2) 자료형과 대입할 값만 입력하기
		   
		   방법2는 자료형과 함께 이중 중괄호를 사용해 생성할 때 초깃값을 넘겨 주는 것. 대괄호 안에 행렬의 크기를 넣지 않으며, 초깃값에 따라
		   각 행마다 들어갈 배열의 길이가 결정됨.
		   
		   자료형[][] 참조 변수명 = new 자료형[][] {{값, 값, 값}, {값, 값, 값}, ..., {값, 값, 값}};
		   int[][] a = new int[][] {{1, 2}, {4, 5, 6}, {7, 8, 9, 10}};
		   
		   최종적으로 메모리에 저장되는 결과는 앞의 방법도 동일하나, 방법2는 선언과 대입을 분리하거나 동시에 표현이 가능하다는 장점이 있음.
		   
		   int[][] a = new int[][] {{1, 2}, {4, 5, 6}, {7, 8, 9, 10}};
		   
		   int[][] a;
		   a = new int[][]{{1, 2}, {4, 5, 6}, {7, 8, 9, 10}};
		   
		   방법3) 대입할 값만 대입하기
		   
		   2차원 비정방 행렬 배열의 객체를 생성하는 마지막 방법은 초깃값만 이중 괄호에 넣어 대입하는 것임. new 키워드의 사용도 필요 없고
		   여러 방법 중 가장 간결하게 생성이 가능하나, 분절성은 가장 떨어진다는 단점이 있음.
		   
		   자료형[][] 참조 변수명 = {{값, 값, 값}, {값, 값, 값}, ..., {값, 값, 값}};
		   int[][] a = {{1, 2}, {4, 5, 6}, {7, 8, 9, 10}};
		   
		 */
		
		/*- 실습 - 2차원 비정방 행렬 배열의 3가지 원소 값 대입 방법*/
		System.out.println("- 실습 - 2차원 비정방 행렬 배열의 3가지 원소 값 대입 방법");
		System.out.println();
		
		/*방법1) 비정방 행렬의 선언 및 값 대입 방법1*/
		System.out.println("방법1) 비정방 행렬의 선언 및 값 대입 방법1");
		
		int[][] array1 = new int[2][]; // 행렬 배열의 행성분만을 생성, 행이 2개
		
		array1[0] = new int[2]; // 1번째 행의 열 갯수 선언
		array1[0][0] = 1; // 1행 1열의 값 대입
		array1[0][1] = 2; // 1행 2열의 값 대입
		
		array1[1] = new int[3]; // 1번째 행의 열 갯수 선언, 행간의 열 갯수가 상이하므로  이 순간부터비정방 행렬 배열이 됨
		array1[1][0] = 3; // 2행 1열의 값 대입
		array1[1][1] = 4; // 2행 2열의 값 대입
		array1[1][2] = 5; // 2행 3열의 값 대입
		
		System.out.println(Arrays.toString(array1[0])); // 1행의 원소들 출력
		System.out.println(Arrays.toString(array1[1])); // 2행의 원소들 출력
		System.out.println();
		
		int[][] array2 = new int[2][]; 
		array2[0] = new int[] {1, 2}; // 위보다 더 간단하게 원소 추가가 가능함.
		array2[1] = new int[] {3, 4, 5};
		
		System.out.println(Arrays.toString(array2[0])); // 1행의 원소들 출력
		System.out.println(Arrays.toString(array2[1])); // 2행의 원소들 출력
		System.out.println();
		
		/*방법2) 비정방 행렬의 선언 및 값 대입 방법2*/
		System.out.println("방법2) 배정방 행렬의 선언 및 값 대입 방법2");
		
		int[][] array3 = new int[][] {{1, 2}, {3, 4, 5}}; // 위보다 더 간소화된 방법
		
		System.out.println(Arrays.toString(array3[0])); // 1행의 원소들 출력
		System.out.println(Arrays.toString(array3[1])); // 2행의 원소들 출력
		System.out.println();
		
		int[][] array4;
		array4 = new int[][] {{1, 2}, {4, 5, 6}};
		System.out.println(Arrays.toString(array4[0])); // 1행의 원소들 출력
		System.out.println(Arrays.toString(array4[1])); // 2행의 원소들 출력
		System.out.println();
		
		/*방법2) 비정방 행렬의 선언 및 값 대입 방법3*/
		System.out.println("방법2) 배정방 행렬의 선언 및 값 대입 방법3");
		
		int[][] array5 = {{1, 2}, {3, 4, 5}}; // 최대로 간소화한 입력 방법
		System.out.println(Arrays.toString(array5[0])); // 1행의 원소들 출력
		System.out.println(Arrays.toString(array5[1])); // 2행의 원소들 출력
		System.out.println();
		
		// int[][] array6; // 다만 위 방법은 배열의 선언과 객체 대입의 분리가 불가능함.
		//array6 = {{1, 2}, {3, 4, 5}}; 
		
	}
	
}
