package sec01_createobjectandusageofmembers.EX01_CreateObjectAndUsageOfMembers;

class A{
	int m = 3;
	void print() { // 클래스 A 내부의 메서드
		System.out.println("클래스 A 내의 메서드를 활용한 객체 생성 및 활용");
	}
}

public class CreateObjectAndUsageOfMembers {
	
	public static void main(String[]args) {
		
		/* 6.2 객체 생성과 활용
		   6.2.1 객체 생성하기
		   
		   앞서 클래스를 붕어빵 기계에 빗댄 표현을 이어서 객체의 생성과 활용은 다음과 같이 대입이 가능함.
		   
		   [클래스]로부터 [객체를 생성하는 방법]과 객체를 [활용하는 방법]
		   [붕어빵 기계]에서 [붕어빵을 찍는 방법]과 붕어빵을 [맛있게 먹는 방법]
		   
		   객체는 new 키워드로 생성할 수 있음. 자바에서는 대부분의 클래스가 이 방법으로 객체를 생성함. 클래스에 따라 메서드를 사용해 객체를
		   생성할 때도 있지만, 이때도 해당 메서드 내부에서 new를 사용해 객체를 생성함. 클래스에 따라 메서드를 사용해 객체를 생성할 때도 있지만,
		   이때도 해당 메서드 내부에서 new를 사용해 객체를 생성함. 즉, 모든 클래스가 객체를 new 키워도르 생성하는 것.
		   
		   클래스 참조 변수명 = new 생성자();
		   A a = A();
		   
		   객체 생성 코드를 구성하는 요소를 앞에서부터 살펴보자. 첫 번째는 클래스 명, 두 번째는 참조 변수임. 참조 변수는 실제 데이터를
		   저장하는 것이 아니라 실제 데이터가 있는 힙 메모리의 위칫값을 가리키는 변수를 의미함. 세 번째는 new 키워드로 '~을 힙 메모리에
		   넣어라'는 의미임. 마지막은 생성자. 클래스와 이름이 동일하지만 뒤에 소괄호가 붙음. 이 생성자가 실행되면 클래스의 객체가 생성됨.
		   따라서 new 생성자의 결과물로 나온 객체를 힙 메모리에 넣음.
		   
		   그런데 실제 데이터를 저장하고 있는 객체를 힙 메모리의 어느 위치에 넣었는지를 알려 주지 않는다면 그 객체를 쓸 방법이 없게 됨.
		   그래서 힙 메모리에 실제 객체를 넣을 때 그 위칫값을 참조 변수에게 알려주는 것. 위 객체 생성 예시에 포함된 코드를 다시 한번 말로
		   표현하면 'A()생성자로 만든 객체를 힙 메모리에 넣고, 위칫값을 A 타입의 참조 변수 a에 저장하라'고 표현 할 수 있음.
		   
		   객체 생성에 따른 메모리 구조 살펴보기
		   
		   클래스 참조 변수명 = new 생성자();
		   A a = A();
		   
		   클래스 A는 메모리의 클래스 영역, 참조변수는 스택 영역에 들어감. 내부 공간에는 실제 데이터(객체)의 위칫값을 저장함. 생성자로 만들어진
		   객체는 힙 메모리에 위치하며, 객체 내부에는 클래스의 멤버(필드, 메서드, 이너 클래스)가 위치함. 이제 객체에 포함된 3가지 요소가
		   사용할 수 있는 상태가 된 것. 그런데 메서드를 살펴보면, 실제 메서드 구현 코드는 클래스 영역 안에 저장해 놓고, 객체 안에는
		   메서드 영역의 위치만 가리키고 있다는 것을 알 수 있음. 그 이유는 1개의 클래스로 만든 모든 객체는 속성(필드)은 달라도 기능(메서드)는
		   동일하기 때문임. 즉, 객체를 100개 만들어도 메서드는 한 번만 만들면 된다는 뜻. 만약 팥 붕어빵이 질리면 소만 바꿔서 슈크림 붕어빵,
		   피자 붕어빵을 만들어 먹듯 메서드 또한 세부 값 변화를 주면 간단하게 비슷한 다른 객체들을 만들기도 용이함.
		   
		   6.2.2 객체 활용하기
		   
		   이러한 이해를 바탕으로 생성한 객체를 활용해 보자. 객체를 활용한다는 것은 객체 내부의 멤버를 사용한다는 의미임. 가령 필드를 사용한다는
		   것은 필드에 값을 넣거나 읽어 온다는 것, 메서드를 사용한다는 것은 해당 메서드를 호출한다는 것을 말함. 
		   
		   포인트 연산자 사용하기
		   
		   자바에서는 힙 메모리에 직접 접근할 수 있는 방법은 없으며, 위치 정보를 포함하고 있는 참조 변수를 이용해서만 객체에 접근이 가능함.
		   이때 사용하는 것이 포인트 연산자 (.)임. 포인트 연산자의 의미는 '해당 위치에 있는 객체 안을 보라' 정도가 됨. 포인트 연산자를
		   애용해 객체 내부의 멤버를 활용하는 방법은 다음과 같음. 
		   
		   참조 변수명.필드명
		   참조 변수명.메서드명() 
		   
		   이때 참조 변수명.필드명 또는 참조 변수명.메서드명()은 '참조 변수가 가리키는 곳의 객체 안에 있는 필드값 또는 메서드'를 나타냄.
		   
		   필드 메서드의 활용 예
		   
		   A a = new A();
		   System.out.println(a.m);
		   a.print();
		   
		   지금까지 클래스와 객체의 개념과 객체의 생성 밥법 및 활용 방법을 알아봤음. 클래스를 활용하는 데 가장 기본이 되는 개념을 정립하는
		   내용이므로 아직 이해되지 않는다면 반복해서 읽어본 후에 학습이 필요함.
		    
		 */
		
		/*- 실습 - 클래스 구성과 객체의 생성 및 활용*/ System.out.println("- 실습 - 클래스 구성과 객체의 생성 및 활용");
		
		/*클래스(붕어빵 기계)의 정의*/ System.out.println("클래스(붕어빵 기계)의 정의");
		
		// 예제에는 이 위치에 외부 클래스 A를 작성해 놓았으나, 앞선 내용을 먼저 설명해야 하는 관계로 패키지 아래에 작성함.
		
		// 클래스로 객체(붕어빵) 생성
		
		A a = new A();
		
		/*클래스 멤버 활용(붕어빵 먹기)*/ System.out.println("클래스 멤버 활용(붕어빵 먹기)");
		/*@ 필드활용: 필드에 값 쓰기/읽기*/ System.out.println("@ 필드활용: 필드에 값 쓰기/읽기");
		
		a.m = 5;
		System.out.println(a.m);
		System.out.println();
		
		/*@메서드 활용: 메서드를 호출함.*/ System.out.println("@ 필드활용: 필드에 값 쓰기/읽기");
		a.print();
		
	}
	
}
