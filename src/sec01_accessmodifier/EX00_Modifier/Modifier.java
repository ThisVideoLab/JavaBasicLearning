package sec01_accessmodifier.EX00_Modifier;

public class Modifier {

	public static void main(String[]args) {
		
		/* 9. 자바 제어자 1
		   9.1 접근 지정자
		   
		   자바 제어자는 클래스, 필드, 메서드, 생성자 등에게 어떠한 특징을 부여하는 문법 요소임. '빨간색 사과', '맛있는 사과'와 같이
		   사과(클래스나 멤버 등)를 꾸며주는 형용사쯤으로 간주할 수 있음. 접근 지정자는 자바 제어자의 한 종류로, 클래스, 멤버, 생성자 앞에
		   위치할 수 있으며, 사용 범위를 정의하는 역할을 함.
		   패키지를 공부할 때 다른 패키지에서 클래스를 사용할 수 있도록 하기 위해서는 public 클래스여야 한다고 익히 배움. 이 챕터에서는
		   이러한 개념의 정확한 의미를 알아볼 것임. 접근 지정자는 멤버(필드, 메서드, 이너 클래스)와 생성자, 즉 클래스의 내부 구성 요소
		   4가지 앞에 붙어 있는 때와 클레스 자체에 붙어 있는 때를 구분할 줄 알아야 함. 먼저 멤버나 생성자 앞에 붙어 사용될 때의 특징을 알아보자.
		   
		   9.1.1 멤버 및 생성자의 접근 지정자
		   
		   멤버 및 생성자에는 public, protected, default(또는 package), private라는 4가지 종류의 접근 지정자를 사용 가능함.
		   이때 접근 지정자는 필드나 메서드 또는 생성자 앞에 위치함. 만약 아무것도 작성하지 않으면 default 접근 지정자가 자동으로 설정됨.
		   즉, 우리가 지금까지 만들어 왔던 접근 지정자를 지정하지 않은 모든 클래스의 내부 구성 요소에 늘 default 접근 지정자를 사용한 것.
		   
		   class Test{
		      public int a;
		      protected int b;
		      int c; // default 접근 지정자가 자동 설정됨.
		      private int d;
		      public void abc() {}
		      protected void bcd() {}
		      void cde() {}  // default 접근 지정자가 자동 설정됨.
		      private void def() {}
		   }
		   
		   4가지 접근 지정자의 범위는 넓은 순서대로 public > protected > default > private의 순서로 나타남. 
		   먼저 private는 자신의 클래스 내부에서만 사용할 수 있는 접근 지정자임. 즉, 같은 멤버끼리만 사용 가능하며, 외부 클래스는 불가능함.
		   두 번째 default는 같은 패키지 안의 모든 클래스에서 사용 가능한 접근 지정자임. 따라서 default 접근 지정자를 'package 접근
		   지정자'라고 부르기도 함. 세 번째인 protected는 일단 default보다는 넓은 범위의 접근 지정자 이므로, 우선 같은 패키지의 모든
		   클래스에서 사용 가능함. 추가로 다른 패키지의 자식 클래스 안에서 사용할 수 있다는 것인데, 이 범위는 상속을 다루는 챕터에서 함께 다룰
		   예정임. 마지막 public은 동일 패키지의 모든 클래스는 물론, 다른 패키지의 모든 클래스들도 접근 가능함. 사실상 어디에서나 사용 
		   가능하다는 것. 
		   
		   접근 생성자에 대한 예제를 통한 학습을 위해 이 소스 코드가 속한 패키지 내의 A 소스 코드 파일과 B 소스 코드 파일을 살펴보자.
		 */
		
		
	}
	
}
